<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/12/08/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-03-UI%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><ul>
<li><p>TextView</p>
<ul>
<li><code>gravity</code>指定对齐方式，可选值为：<code>top,bottom,left,right,center</code></li>
<li><code>textSize</code>：24sp</li>
<li><code>textColor</code>：颜色</li>
</ul>
</li>
<li><p>Button</p>
<ul>
<li><code>textAllCaps</code></li>
</ul>
</li>
<li><p>EditText</p>
<ul>
<li><code>hint</code></li>
<li><code>maxLines</code></li>
<li><code>editText.getText().toString();</code></li>
</ul>
</li>
<li><p>ImageView</p>
<ul>
<li>图片放在drawable-xhdpi目录</li>
<li><code>src=&quot;@drawable/img_1&quot;</code></li>
<li><code>setImageResource(R.drawable.img_2)</code></li>
</ul>
</li>
<li><p>ProgressBar</p>
<ul>
<li><code>visibility</code>:<code>visible/invisible/gone</code></li>
<li><code>setVisibility(View.VISIBLE)</code></li>
<li><code>style=&quot;?android:attr/progressBarStyleHorizontal&quot;</code></li>
<li><code>android:max=100</code></li>
<li><code>int progress = progressBar.getProgress();</code></li>
<li><code>progressBar.setProgress();</code></li>
</ul>
</li>
<li><p>AlertDialog</p>
<ul>
<li><pre><code class="java">AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);
dialog.setTitle(&quot;&quot;);
setMessage();
setCancelable(false)
setPositiveButton(&quot;OK&quot;,new DialogInterface.OnClickListener()&#123;&#125;)
setNegativeButton(&quot;Cancel&quot;,new);
dialog.show();
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* ProgressDialog</span><br><span class="line"></span><br><span class="line"><span class="operator">  * </span>```java</span><br><span class="line">    ProgressDialog progressDialog = <span class="keyword">new</span> <span class="constructor">ProgressDialog(MainActivity.<span class="params">this</span>)</span>;</span><br><span class="line">    set<span class="constructor">Title()</span>;</span><br><span class="line">    set<span class="constructor">Message()</span>;</span><br><span class="line">    set<span class="constructor">Cancelabe()</span>;</span><br><span class="line">    progressDialog.show<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="四种布局"><a href="#四种布局" class="headerlink" title="四种布局"></a>四种布局</h2><ul>
<li>线性布局<code>LinearLayout</code><ul>
<li><code>android:orientation=&quot;vertical&quot;</code></li>
<li><code>layout_gravity</code></li>
<li><code>layout_weight</code></li>
<li>常用效果：Edit：<code>layout_weight=1</code>，Button：<code>layout_weight&amp;layout_height=&quot;wrap_content&quot;</code></li>
</ul>
</li>
<li>相对布局<code>RelativeLayout</code><ul>
<li><code>layout_alignParentLeft=&quot;true&quot;</code></li>
<li><code>layout_alignParentTop</code></li>
<li><code>layout_centerInParent</code></li>
<li>相对于控件</li>
<li><code>layout_above=&quot;@id/button3&quot;</code></li>
<li><code>layout_toLeftOf=&quot;@id/button3&quot;</code></li>
</ul>
</li>
<li>帧布局<code>FrameLayout</code><ul>
<li>所有控件默认摆放在布局左上角</li>
</ul>
</li>
<li>百分比布局<code>android.support.percent.PercentFrameLayout</code><ul>
<li>继承<code>FrameLayout</code>属性</li>
<li>打开<code>app/build.gradle</code>，在<code>dependencies</code>加入<code>complier &#39;com.android.support:percent:24.2.1&#39;</code></li>
<li><code>app:layout_widthPercent=&quot;50%&quot;</code></li>
<li><code>layout_gravity=&quot;right|top&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="创建自定义控件"><a href="#创建自定义控件" class="headerlink" title="创建自定义控件"></a>创建自定义控件</h2><h6 id="引入布局"><a href="#引入布局" class="headerlink" title="引入布局"></a>引入布局</h6><ol>
<li><p>新建布局<code>title.xml</code></p>
<ul>
<li><code>background=&quot;@drawable/title&quot;</code>背景图片，可以使用颜色</li>
<li><code>android:layout_margin</code>指定控件在上下左右方向上的偏移距离</li>
<li><code>android:layout_marginLeft</code>指定控件在左方向上的偏移距离</li>
</ul>
</li>
<li><p>在<code>activity_main.xml</code>引入布局</p>
</li>
</ol>
<ul>
<li><code>&lt;include layout=&quot;@layout/title&quot;/&gt;</code></li>
</ul>
<ol start="3">
<li><p>隐藏标题栏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ActionBar actionBar = getSupportActionbar();</span><br><span class="line"><span class="keyword">if</span>(actionBar != <span class="keyword">null</span>)&#123;</span><br><span class="line">    actionBar.hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h6 id="创建自定义控件-1"><a href="#创建自定义控件-1" class="headerlink" title="创建自定义控件"></a>创建自定义控件</h6><ol>
<li><p>新建<code>Titlelayout</code>继承自<code>LinearLayout</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TitleLayout</span><span class="params">(Context context,AttributeSet attrs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context,attrs);</span><br><span class="line">    LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>)<span class="comment">//动态加载</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写LinearLayout构造函数，在布局中引入TitleLayout控件就会调用这个函数，然后对标题栏动态加载，通过LayoutFlater的from()方法构建LayoutInfalter对象，调用infalte()方法动态加载布局文件，infalter()需要两个参数，第一个是布局Id，第二个参数是给加载好的布局添加父布局，这里是TitleLayout</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加按钮注册点击事件</span></span><br><span class="line">setOnClickListener</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>activity_main.xml</code>布局文件中添加自定义控件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;com.example.uicustomviews.TitleLayout</span><br><span class="line">     android.layout_width=&quot;match_parent&quot;</span><br><span class="line">     android.layout_height=&quot;wrap_content&quot;/&gt;                                   </span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\詹光辉\Documents\自定义控件.png" alt="自定义控件"></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/12/09/C++/</url>
    <content><![CDATA[<h6 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h6><ol>
<li><p>声明：<code>vector(int) ivec(10);</code></p>
</li>
<li><p>声明并初始化：<code>vector(int) ivec(10,-1);</code>初始化为-1</p>
</li>
<li><p>不能显式初始化，但可以借用数组：需要指定开始地址和末尾地址：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[<span class="number">6</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ivec</span><span class="params">(ia,ia+<span class="number">6</span>)</span></span>;<span class="comment">//第二个指针指向被拷贝元素的下一个位置</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ivec</span><span class="params">(&amp;ia[<span class="number">2</span>], &amp;ia[<span class="number">5</span>])</span><span class="comment">//拷贝三个元素</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>push_back()</code>在末尾插入元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> word;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;word)&#123;</span><br><span class="line">    text.push_back(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>begin()</code>和<code>end()</code>返回的迭代器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>(<span class="built_in">string</span>)::iterator it = text.begin(); it!=text.end(); it++)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h6 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h6><ol>
<li><code>const</code>把对象变为常量，使其只读，<code>const</code>指针对象可以被重新赋值，但不能修改指向的对象</li>
<li>引用必须初始化为指向一个对象</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hi World</title>
    <url>/2020/12/08/Hi-World/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>标签1</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2020/12/09/Test/</url>
    <content><![CDATA[<h1 id="Python实验一部分代码"><a href="#Python实验一部分代码" class="headerlink" title="Python实验一部分代码"></a>Python实验一部分代码</h1><h2 id="1、猜数字游戏"><a href="#1、猜数字游戏" class="headerlink" title="1、猜数字游戏"></a>1、猜数字游戏</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_while</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 猜数字 &quot;&quot;&quot;</span></span><br><span class="line">    answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    player_times = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">while</span> player_times &gt; <span class="number">0</span>:</span><br><span class="line">        player_input = <span class="built_in">input</span>(<span class="string">&quot;你有 %d 次机会，输入你猜的数字（1~100）：&quot;</span> % player_times)</span><br><span class="line">        player_input = <span class="built_in">int</span>(player_input)</span><br><span class="line">        <span class="keyword">if</span> player_input == answer:</span><br><span class="line">            print(<span class="string">&quot;Congratulations!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> player_input &gt; answer:</span><br><span class="line">            print(<span class="string">&quot;Too large&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;Too small&quot;</span>)</span><br><span class="line">        player_times -= <span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;Game Over! The answer is: &quot;</span>, answer)</span><br></pre></td></tr></table></figure>

<h2 id="2、斐波那契数列"><a href="#2、斐波那契数列" class="headerlink" title="2、斐波那契数列"></a>2、斐波那契数列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 斐波那契数列 &quot;&quot;&quot;</span></span><br><span class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        print(a, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        a, b = b, a + b</span><br></pre></td></tr></table></figure>

<h2 id="3、字符串交接"><a href="#3、字符串交接" class="headerlink" title="3、字符串交接"></a>3、字符串交接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strIntersection</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2.startswith(str1[i:<span class="built_in">len</span>(str1)]):</span><br><span class="line">            <span class="keyword">return</span> (str1[:i] + str2)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Test python exercise</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
